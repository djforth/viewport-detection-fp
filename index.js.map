{"version":3,"file":"index.js","sources":["src/check_device.js","src/track_changes.js","src/size_changed.js","src/index.js"],"sourcesContent":["export default breakpoints => width => {\n  for (let dev in breakpoints) {\n    if (breakpoints[dev]) {\n      let { min, max } = breakpoints[dev];\n      if (max === null && width >= min) return dev;\n      if (width >= min && width < max) return dev;\n    }\n  }\n\n  return null;\n};\n","export default tracker => {\n  window.addEventListener('resize', tracker, false);\n\n  window.addEventListener('orientationchange', tracker, false);\n};\n","import CheckDevice from './check_device';\n\nexport default (breakpoints, device, width) => {\n  let currentWidth = width;\n  const checker = CheckDevice(breakpoints);\n  device(checker(currentWidth));\n  return changeWidth => {\n    if (changeWidth === currentWidth) return false;\n    currentWidth = changeWidth;\n    let newDevice = checker(currentWidth);\n    if (newDevice === null) return false;\n    if (device() === newDevice) return false;\n    device(newDevice);\n    return true;\n  };\n};\n","import ManageDevice from './manage_device';\nimport TrackChange from './track_changes';\nimport SizeChanged from './size_changed';\n\nconst isTouchDevice = () => 'ontouchstart' in window || navigator.maxTouchPoints; // works on most browsers // works on IE10/11 and Surface\n\nexport default bp => {\n  const breakpoints = bp || {\n    mobile: { min: 0, max: 767 },\n    tablet: { min: 768, max: 1023 },\n    desktop: { min: 1024, max: null },\n  };\n\n  let deviceWidth = window.innerWidth;\n  let device = ManageDevice(breakpoints, deviceWidth);\n\n  let callbacks = [];\n  let touch = isTouchDevice();\n  const changeCheck = SizeChanged(breakpoints, device, deviceWidth);\n\n  const obj = {\n    addCallback(cb) {\n      if (Object.prototype.toString.call(cb) === '[object Function]') {\n        cb = [cb];\n      }\n      callbacks = callbacks.concat(cb);\n\n      return obj;\n    },\n    getDevice() {\n      return device();\n    },\n    getWidth() {\n      return deviceWidth;\n    },\n    track() {\n      TrackChange(e => {\n        let width = window.innerWidth;\n        let check = changeCheck(width);\n        if (check) {\n          deviceWidth = width;\n          callbacks.forEach(cb => {\n            cb(device(), width);\n          });\n        }\n      });\n    },\n    touchAvailable() {\n      return touch;\n    },\n  };\n\n  return obj;\n};\n"],"names":["a","min","max","b","window","addEventListener","desktop","c","innerWidth","d","ManageDevice","e","f","isTouchDevice","g","SizeChanged","h","addCallback","prototype","toString","call","concat","getDevice","getWidth","track","TrackChange","forEach","touchAvailable"],"mappings":"6LAAA,qCACE,IAAK,WACH,GAAIA,KAAkB,OACDA,SAAbC,QAAKC,IACX,GAAY,UAAQC,KAAc,SAClC,GAAIA,MAAgBA,IAAa,SAIrC,4JCRAC,OAAOC,iBAAiB,eAExBD,OAAOC,iBAAiB,uICQlBF,UACJA,yJCHyB,MACzBG,SAAWL,IAAK,KAAMC,IAAK,OAGzBK,EAAcH,OAAOI,WACrBC,EAASC,OAETC,KACAC,EAAQC,IACNC,EAAcC,SAEdC,GACJC,wBAME,MAL2C,6BAAhCC,UAAUC,SAASC,UAC5BpB,OAEFW,EAAYA,EAAUU,aAIxBC,qBACE,YAEFC,oBACE,UAEFC,iBACEC,EAAY,WACV,MAAYrB,OAAOI,WACPM,OAEVP,IACAI,EAAUe,QAAQ,YAChBvB,EAAGM,aAKXkB,0BACE,WAIJ"}