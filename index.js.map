{"version":3,"file":"index.js","sources":["src/manage_device.js","src/track_changes.js","src/size_changed.js","src/index.js"],"sourcesContent":["const include = (arr, obj)=>(arr.indexOf(obj) != -1);\n\n\nexport default (breakpoints)=>{\n  let device = 'mobile';\n  let expected = Object.keys(breakpoints);\n\n  return (d)=>{\n    if (!include(expected, d)) return device;\n    device = d;\n    return device;\n  };\n};\n","\nexport default (tracker)=>{\n  window.addEventListener(\n    'resize', tracker, false\n  );\n\n  window.addEventListener(\n    'orientationchange', tracker, false\n  );\n};\n","\nconst CheckDevice = (breakpoints)=>(width)=>{\n  for (let dev in breakpoints){\n    if (breakpoints[dev]){\n      let {min, max} = breakpoints[dev];\n      if (max === null && width > min) return dev;\n      if (width > min && width < max) return dev;\n    }\n  }\n\n  return null;\n};\n\nexport default (breakpoints, device, width)=>{\n  let currentWidth = width;\n  const checker = CheckDevice(breakpoints);\n  device(checker(currentWidth));\n  return (changeWidth)=>{\n    if (changeWidth === currentWidth) return false;\n    currentWidth = changeWidth;\n    let newDevice = checker(currentWidth);\n    if (newDevice === null) return false;\n    if (device() === newDevice) return false;\n    device(newDevice);\n    return true;\n  };\n};\n","\nimport ManageDevice from './manage_device';\nimport TrackChange from './track_changes';\nimport SizeChanged from './size_changed';\n\nconst isTouchDevice = ()=>{\n  return 'ontouchstart' in window        // works on most browsers\n      || navigator.maxTouchPoints;       // works on IE10/11 and Surface\n};\n\nexport default (breakpoints)=>{\n  breakpoints = breakpoints || {\n    mobile: {min: 0, max: 767}\n    , tablet: {min: 768, max: 992}\n    , desktop: {min: 993, max: null}\n  };\n\n  let device = ManageDevice(breakpoints);\n  let deviceWidth = window.innerWidth;\n  let callbacks = [];\n  let touch = isTouchDevice();\n  const changeCheck = SizeChanged(\n    breakpoints\n    , device\n    , deviceWidth\n  );\n\n  const obj = {\n    addCallback(cb){\n      if (Object.prototype.toString.call(cb) === '[object Function]'){\n        cb = [cb];\n      }\n      callbacks = callbacks.concat(cb);\n\n      return obj;\n    }\n    , getDevice(){\n      return device();\n    }\n    , getWidth(){\n      return deviceWidth;\n    }\n    , track(){\n      TrackChange((e)=>{\n        let width = window.innerWidth;\n        let check = changeCheck(width);\n        if (check){\n          deviceWidth = width;\n          callbacks.forEach((cb)=>{\n            cb(device(), width);\n          });\n        }\n      });\n    }\n    , touchAvailabile(){\n      return touch;\n    }\n  };\n\n  return obj;\n};\n"],"names":["indexOf","c","Object","keys","b","window","addEventListener","a","min","max","e","CheckDevice","d","prototype","toString","call","concat","getDevice","getWidth","track","TrackChange","innerWidth","f","forEach","touchAvailabile"],"mappings":"6LAAA,MAAgB,qBAAkC,KAAjBA,0BAI/B,MAAa,SACTC,EAAWC,OAAOC,QAEtB,iCAEEC,sBCPFC,OAAOC,iBACL,eAGFD,OAAOC,iBACL,6BCNgB,+BAClB,IAAK,WACH,GAAIC,KAAiB,OACFA,SAAZC,QAAKC,IACV,GAAY,UAAQL,IAAa,SACjC,GAAIA,KAAeA,IAAa,SAIpC,gCAIA,QACMM,EAAUC,KAEhB,SADOD,MACA,YACL,GAAIH,MAA8B,SAElC,MAAgBG,EADhBE,KAFoB,iBAKhBR,UACJA,0QCM6C,6BAAhCS,UAAUC,SAASC,UAC5BR,OAEFK,EAAYA,EAAUI,aAItBC,qBACA,YAEAC,oBACA,UAEAC,iBACAC,EAAY,WACV,MAAYf,OAAOgB,WACPC,OAEVrB,IACAW,EAAUW,QAAQ,YAChBtB,EAAGG,aAKToB,2BACA,WAIJ"}